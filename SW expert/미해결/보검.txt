#include <iostream>
#include <algorithm>
#include <vector>

using namespace std;

unsigned long long isTriangle(vector<long long>& v) {
	int end = v.size() - 1;
	for (int i = end; i >= 0; i--) {
		if (v[i] == -1) continue;

		if (i >= 2 && v[i] < v[i - 1] + v[i - 2]) {
			unsigned long long sum = v[i] + v[i - 1] + v[i - 2];
			v[i] = -1; v[i - 1] = -1; v[i - 2] = -1;
			return sum;
		}
	}
	return -1;
}
 
void findTriangle(vector<long long>& v) {
	int len = v.size();

	for (int i = 0; i < len; i++) {
		for (int j = i + 1; j < len; j++) {
			for (int k = j + 1; k < len; k++) {

			}
		}
	}
}

int main() {
	cin.tie(NULL);
	ios_base::sync_with_stdio(false);
	int tc; cin >> tc;
	int count = 1;
	while (tc--) {
		unsigned long long ans = 0;
		vector<long long> lineList;
		int N; cin >> N;
		for (int i = 0; i < N; i++) {
			long long number; cin >> number;
			lineList.push_back(number);
		}

		if (N < 6) {
			cout << "#" << count++ << " " << 0 << "\n";
			continue;
		}

		sort(lineList.begin(), lineList.end());
		for (int i = 0; i < 2; i++) {
			unsigned long long result = isTriangle(lineList);
			if (result == -1) {
				ans = 0; break;
			}
			else {
				ans += result;
			}
		}
		cout << "#" << count++ << " " << ans << "\n";
	}
	return 0;
}